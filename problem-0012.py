from time import time

inicio = time()
def highlyDivisibleTriangularNumber():
    """
    The sequence of triangle numbers is generated by adding
    the natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would
    be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over
    five divisors.

    This function return the value of the first triangle number to have
    over five hundred divisors.
    :return:
    """
    t, num, l, div, f, d, p = 0, [], [], 2, [1], 0, 0
    for i in range(1, 100_000_000):
        if t > 100_000_000:
            break
        t = int(i * (i + 1) / 2)
        l.append(t)
    for i in range(0, len(l)):
        num.append(l[i])
        while l[i] > 1:
            if l[i] % div == 0:
                if p > 1:
                    f.append(div ** p)
                else:
                    f.append(div)
                l[i] /= div
                p += 1
            elif l[i] % div != 0:
                div += 1
                p = 0
        for k in range(0, len(f)):
            for j in range(0, len(f)):
                d = f[k] * f[j]
                if d not in f and f[k] * f[j] <= num[0] and num[0] % d == 0:
                    f.append(d)
        if len(f) > 500:
            print(f)
            return num[0]
    div = 2
    f = [1]
    num = []


highlyDivisibleTriangularNumber()

fim = time()
print(f'{(fim - inicio):.2f}')
